import socket
import threading

from PyQt5 import QtCore, QtGui
from PyQt5.QtCore import QRect, QMetaObject, QCoreApplication, Qt, QDir
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QLineEdit, QVBoxLayout, QWidget, QLCDNumber, QComboBox, \
    QCompleter, QGroupBox, QFormLayout, QPushButton, QPlainTextEdit, QMenuBar, QStatusBar, QListView, QListWidget, \
    QSplitter, QFileDialog, QAbstractScrollArea, QTableWidgetItem, QTableWidget
import requests
import sys
from random import choice
import ipaddress  # for ipv4 validation
import os
import time
import webbrowser
import csv

# apis is list of virustotal APIs 
# get subdomains,siblings and resolutions of a domain
def get_domain_info(domain, apis):
    result = "EMPTY"
    url = 'https://www.virustotal.com/vtapi/v2/domain/report?domain={}&apikey={}'.format(domain, choice(apis))
    domains = []
    try:
        r = requests.get(url)
        result = r.json()
        if "subdomains" in result.keys():
            for domain in result['subdomains']:
                domains.append(domain)
        if "resolutions" in result.keys():
            for domain in result['resolutions']:
                domains.append(domain['ip_address'])
        if "domain_siblings" in result.keys():
            for domain in result['domain_siblings']:
                domains.append(domain)
    except Exception as e:
        #print the line of exception
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno, e)
    return domains

# get domains related to an IP address
def get_ip_info(ip, api_key):
    result = "EMPTY"
    url = 'https://www.virustotal.com/vtapi/v2/ip-address/report?ip={}&apikey={}'.format(ip, api_key)
    domains = []
    try:
        r = requests.get(url)
        result = r.json()
        for j in result['resolutions']:
            domains.append(j['hostname'])
        result = domains
    except Exception as e:
        #print(e)
        result = "ERROR"
    return result

# generated by PyQt Designer
class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(QMainWindow, self).__init__()
        self.setWindowTitle("My App")

    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(844, 558)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.VirusTotal_GB = QGroupBox(self.centralwidget)
        self.VirusTotal_GB.setObjectName(u"VirusTotal_GB")
        self.VirusTotal_GB.setGeometry(QRect(595, 20, 221, 131))
        self.formLayout = QFormLayout(self.VirusTotal_GB)
        self.formLayout.setObjectName(u"formLayout")
        self.VT_Qline_L = QLabel(self.VirusTotal_GB)
        self.VT_Qline_L.setObjectName(u"VT_Qline_L")

        self.formLayout.setWidget(0, QFormLayout.LabelRole, self.VT_Qline_L)

        self.VT_Qline = QLineEdit(self.VirusTotal_GB)
        self.VT_Qline.setObjectName(u"VT_Qline")
        self.VT_Qline.setText("varzesh3.ir")

        self.formLayout.setWidget(0, QFormLayout.FieldRole, self.VT_Qline)

        self.VT_GetIP_B = QPushButton(self.VirusTotal_GB)
        self.VT_GetIP_B.setObjectName(u"VT_GetIP_B")

        self.formLayout.setWidget(1, QFormLayout.FieldRole, self.VT_GetIP_B)

        self.VT_GetDomain_B = QPushButton(self.VirusTotal_GB)
        self.VT_GetDomain_B.setObjectName(u"VT_GetDomain_B")

        self.formLayout.setWidget(2, QFormLayout.FieldRole, self.VT_GetDomain_B)

        self.ResultListView = QListWidget(self.centralwidget)
        self.ResultListView.setObjectName(u"ResultListView")
        self.ResultListView.setGeometry(QRect(10, 190, 191, 271))
        self.loadapis = QGroupBox(self.centralwidget)
        self.loadapis.setObjectName(u"loadapis")
        self.loadapis.setGeometry(QRect(400, 20, 190, 131))
        self.formLayout_2 = QFormLayout(self.loadapis)
        self.formLayout_2.setObjectName(u"formLayout_2")
        self.label = QLabel(self.loadapis)
        self.label.setObjectName(u"label")

        self.formLayout_2.setWidget(0, QFormLayout.SpanningRole, self.label)

        self.filepath = QLineEdit(self.loadapis)
        self.filepath.setObjectName(u"filepath")

        self.formLayout_2.setWidget(1, QFormLayout.SpanningRole, self.filepath)

        self.load_B = QPushButton(self.loadapis)
        self.load_B.setObjectName(u"load_B")

        self.formLayout_2.setWidget(2, QFormLayout.LabelRole, self.load_B)

        self.browse_B = QPushButton(self.loadapis)
        self.browse_B.setObjectName(u"browse_B")

        self.formLayout_2.setWidget(2, QFormLayout.FieldRole, self.browse_B)

        self.about = QGroupBox(self.centralwidget)
        self.about.setObjectName(u"about")
        self.about.setGeometry(QRect(9, 19, 374, 131))
        self.formLayout_3 = QFormLayout(self.about)
        self.formLayout_3.setObjectName(u"formLayout_3")
        self.help = QLabel(self.about)
        self.help.setObjectName(u"help")
        self.help.setWordWrap(True)

        self.formLayout_3.setWidget(0, QFormLayout.LabelRole, self.help)

        self.scan_all = QPushButton(self.centralwidget)
        self.scan_all.setObjectName(u"scan_all")
        self.scan_all.setGeometry(QRect(10, 470, 191, 25))
        self.tableWidget = QTableWidget(self.centralwidget)
        if (self.tableWidget.columnCount() < 4):
            self.tableWidget.setColumnCount(4)
        __qtablewidgetitem = QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, __qtablewidgetitem)
        __qtablewidgetitem1 = QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, __qtablewidgetitem1)
        __qtablewidgetitem2 = QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, __qtablewidgetitem2)
        __qtablewidgetitem3 = QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, __qtablewidgetitem3)
        self.tableWidget.setObjectName(u"tableWidget")
        self.tableWidget.setGeometry(QRect(210, 160, 611, 301))
        self.tableWidget.setSizeAdjustPolicy(QAbstractScrollArea.AdjustToContents)
        self.tableWidget.setSortingEnabled(True)
        self.tableWidget.horizontalHeader().setVisible(True)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.copy_as_csv_B = QPushButton(self.centralwidget)
        self.copy_as_csv_B.setObjectName(u"copy_as_csv_B")
        self.copy_as_csv_B.setGeometry(QRect(210, 470, 171, 25))
        self.splitter = QSplitter(self.centralwidget)
        self.splitter.setObjectName(u"splitter")
        self.splitter.setGeometry(QRect(10, 160, 191, 25))
        self.splitter.setOrientation(Qt.Horizontal)
        self.Clear = QPushButton(self.splitter)
        self.Clear.setObjectName(u"Clear")
        self.splitter.addWidget(self.Clear)
        self.CopyResult_B = QPushButton(self.splitter)
        self.CopyResult_B.setObjectName(u"CopyResult_B")
        self.splitter.addWidget(self.CopyResult_B)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 844, 22))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.load_B.clicked.connect(MainWindow.loadAPIs)
        self.Clear.clicked.connect(self.ResultListView.clear)
        self.browse_B.clicked.connect(MainWindow.selectFile)
        self.VT_GetDomain_B.clicked.connect(MainWindow.vt_get_domains)
        self.VT_GetIP_B.clicked.connect(MainWindow.vt_get_ips)
        self.ResultListView.doubleClicked.connect(MainWindow.add_result_to_qline)
        self.CopyResult_B.clicked.connect(MainWindow.add_to_clipboard)
        self.scan_all.clicked.connect(MainWindow.scan_hosts)
        self.tableWidget.itemDoubleClicked.connect(MainWindow.open_link_in_browser)
        self.copy_as_csv_B.clicked.connect(MainWindow.copy_as_csv)

        QMetaObject.connectSlotsByName(MainWindow)
        self.row_count = self.tableWidget.rowCount()
    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"VirusTotal Helper 0.1", None))
        self.VirusTotal_GB.setTitle(QCoreApplication.translate("MainWindow", u"VirusTotal Actions", None))
        self.VT_Qline_L.setText(QCoreApplication.translate("MainWindow", u"IP/Domain :", None))
        self.VT_GetIP_B.setText(QCoreApplication.translate("MainWindow", u"IP", None))
        self.VT_GetDomain_B.setText(QCoreApplication.translate("MainWindow", u"Domain", None))
        self.loadapis.setTitle(QCoreApplication.translate("MainWindow", u"Load APIs", None))
        self.label.setText(QCoreApplication.translate("MainWindow", u"loaded : None", None))
        self.load_B.setText(QCoreApplication.translate("MainWindow", u"Load", None))
        self.browse_B.setText(QCoreApplication.translate("MainWindow", u"Browse", None))
        self.about.setTitle(QCoreApplication.translate("MainWindow", u"About", None))
        self.help.setText(QCoreApplication.translate("MainWindow",
                                                     u"This tool help you to query virustotal.com using its API. before using this tool you should load APIs list from a file.",
                                                     None))
        self.scan_all.setText(QCoreApplication.translate("MainWindow", u"Scan All", None))
        ___qtablewidgetitem = self.tableWidget.horizontalHeaderItem(0)
        ___qtablewidgetitem.setText(QCoreApplication.translate("MainWindow", u"Host", None));
        ___qtablewidgetitem1 = self.tableWidget.horizontalHeaderItem(1)
        ___qtablewidgetitem1.setText(QCoreApplication.translate("MainWindow", u"80/443", None));
        ___qtablewidgetitem2 = self.tableWidget.horizontalHeaderItem(2)
        ___qtablewidgetitem2.setText(QCoreApplication.translate("MainWindow", u"IP", None));
        ___qtablewidgetitem3 = self.tableWidget.horizontalHeaderItem(3)
        ___qtablewidgetitem3.setText(QCoreApplication.translate("MainWindow", u"Note", None));
        self.copy_as_csv_B.setText(QCoreApplication.translate("MainWindow", u"Copy As CSV", None))
        self.Clear.setText(QCoreApplication.translate("MainWindow", u"Clear", None))
        self.CopyResult_B.setText(QCoreApplication.translate("MainWindow", u"Copy Result", None))

    #  actions
    def vt_get_domains(self):
        self.ResultListView.clear()
        domain = self.VT_Qline.text()
        try:
            domains = get_domain_info(domain, self.APIS)
            self.ResultListView.addItems(sorted(domains))
        except AttributeError as e:
            print(self.ResultListView.addItem("LOAD APIS BEFORE EVERYTHING."))

    def vt_get_ips(self):
        self.ResultListView.clear()
        ip = self.VT_Qline.text()
        domains = get_ip_info(ip, choice(self.APIS))
        self.ResultListView.addItems(sorted(domains))

    def add_result_to_qline(self):
        text = self.ResultListView.selectedItems()
        self.VT_Qline.setText(text[0].text())

    def add_to_clipboard(self):
        text = ""
        for i in range(self.ResultListView.count()):
            text += self.ResultListView.item(i).text() + "\n"

        q = QApplication.clipboard()
        q.setText(text)

    def selectFile(self):
        self.filepath.setText(QFileDialog.getOpenFileName()[0])

    def loadAPIs(self):
        path = self.filepath.text()
        self.APIS = []
        with open(path, "r") as f:
            self.APIS = f.read().splitlines()
        self.label.setText("Loaded : OK !")

    def TCP_connect(self, ip, port_number, delay):
        TCPsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        TCPsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        TCPsock.settimeout(delay)
        try:
            TCPsock.connect((ip, port_number))
            return str(port_number)
        except:
            return ""

    def check_host_and_insert(self, host):
        current_row = self.row_count
        is_80_open = self.TCP_connect(host, 80, 2)

        is_443_open = self.TCP_connect(host, 443, 2)
        ip_address = "-"
        try:
            ip_address = socket.gethostbyname(host)
        except Exception as e:
            print(e)
        data = []
        # insert empty row
        self.tableWidget.insertRow(current_row)
        ports = "{},{}".format(is_80_open, is_443_open)
        for k in range(self.tableWidget.columnCount()):
            self.tableWidget.setItem(
                current_row,
                k,
                QTableWidgetItem(k),
            )

    def scan_hosts(self):
        self.hosts = []
        if self.ResultListView.count() > 2:
            for i in range(self.ResultListView.count()):
                self.hosts.append(self.ResultListView.item(i).text())
        for h in self.hosts:
            print(h)
            threading.Thread(target=self.check_host_and_insert, args=(h,)).start()
            time.sleep(0.5)
    def open_link_in_browser(self):
        r = self.tableWidget.currentRow()
        URL= self.tableWidget.item(r,0).text()
        ports = self.tableWidget.item(r, 1).text()
        if ports.count("443") >=1:
            webbrowser.open_new_tab("https://{}/".format(URL))
        elif ports.count("80") >= 1:
            webbrowser.open_new_tab("http://{}/".format(URL))
        else:
            pass

    def copy_as_csv(self):
        path, _ = QFileDialog.getSaveFileName(self, 'Save File', QDir.homePath() + "/export.csv",
                                              "CSV Files(*.csv *.txt)")
        if path:
            with open(path, 'w') as stream:
                print("saving", path)
                writer = csv.writer(stream, delimiter='\t')
                headers = []
                for column in range(self.tableWidget.columnCount()):
                    header = self.tableWidget.horizontalHeaderItem(column)
                    if header is not None:
                        headers.append(header.text())
                    else:
                        headers.append("Column " + str(column))
                writer.writerow(headers)
                for row in range(self.tableWidget.rowCount()):
                    rowdata = []
                    for column in range(self.tableWidget.columnCount()):
                        item = self.tableWidget.item(row, column)
                        if item is not None:
                            rowdata.append(item.text())
                        else:
                            rowdata.append('')
                    writer.writerow(rowdata)

app = QApplication(sys.argv)

window = Ui_MainWindow()
window.setupUi(window)

window.show()

app.exec()
